{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":3004,"databundleVersionId":861823,"sourceType":"competition"}],"dockerImageVersionId":30715,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# MNIST (Digits) with CNN | 📈 Easy Accuracy Tricks\n**A Digit Recognizer**\nAND easy tricks to boost the accuracy of your own CNN model. If any of the skills seen here are helpful in your own projects, please remember to upvote the notebook.\n\n(If you reach an error, be sure to rerun the blocks before the error block.)\n\nBy Sonny Lowe\n","metadata":{}},{"cell_type":"markdown","source":"# File and Data Processing","metadata":{}},{"cell_type":"markdown","source":"In many cases, learning the structure of the dataset and how to process it into trainable data is more complex than making the data itself. Lets learn how to process the data.","metadata":{}},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nimport os\n\n# These are all the files in your directory\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","metadata":{"execution":{"iopub.status.busy":"2024-06-05T17:16:28.494420Z","iopub.execute_input":"2024-06-05T17:16:28.494788Z","iopub.status.idle":"2024-06-05T17:16:28.505366Z","shell.execute_reply.started":"2024-06-05T17:16:28.494757Z","shell.execute_reply":"2024-06-05T17:16:28.504497Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stdout","text":"/kaggle/input/digit-recognizer/sample_submission.csv\n/kaggle/input/digit-recognizer/train.csv\n/kaggle/input/digit-recognizer/test.csv\n","output_type":"stream"}]},{"cell_type":"code","source":"# Importing Libraries\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nfrom keras.datasets import mnist \nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras.utils import to_categorical\n\n# Set Matplotlib Graphing defaults (stylistic choices)\nplt.style.use(\"seaborn-v0_8\")\nplt.rc('image', cmap='magma')\n\n# Loading the data\ndata = pd.read_csv('../input/digit-recognizer/train.csv')\ntest = pd.read_csv('../input/digit-recognizer/test.csv')\n\nprint('Initial Data Shape:')\nprint('Training Data: ', data.shape)\nprint('Testing Data: ', test.shape)","metadata":{"execution":{"iopub.status.busy":"2024-06-05T17:16:28.509298Z","iopub.execute_input":"2024-06-05T17:16:28.509569Z","iopub.status.idle":"2024-06-05T17:16:35.355534Z","shell.execute_reply.started":"2024-06-05T17:16:28.509548Z","shell.execute_reply":"2024-06-05T17:16:35.354549Z"},"trusted":true},"execution_count":4,"outputs":[{"name":"stdout","text":"Initial Data Shape:\nTraining Data:  (42000, 785)\nTesting Data:  (28000, 784)\n","output_type":"stream"}]},{"cell_type":"markdown","source":"As we can see, the training data has 42,000 images while the testing data has 28,000 images, each of which are represented as a row with 784 columns (one for each pixel in a 28x28 grid). However, the training data contains one additional column for 'label' which can be thought of as the answer key, the actual number represented in the image.\n\nNow, we will forget about the testing data and just deal with the training data. \n\nWe want to reformat it into a 2D image. To do this we use numpy's reshape method. Here is the breakdown of its parameters:\n1. **-1**: This is a placeholder that tells NumPy to automatically calculate the size of this dimension based on the other dimensions and the total size of the array. It ensures that the reshaping operation does not change the total number of elements in the array.\n\n2. **28**: This specifies the height of the image. In this context, it suggests that the images are 28 pixels in height.\n\n3. **28**: This specifies the width of the image. In this context, it suggests that the images are 28 pixels in width.\n\n4. **1**: This specifies the number of channels in the image. A value of 1 indicates that the images are grayscale (single channel). For RGB images, this value would be 3 to represent the three color channels (Red, Green, and Blue).","metadata":{}},{"cell_type":"code","source":"# Separate features and target by calling the name of the column\ny = data.label\nX = data.drop('label', axis=1)\n\n# Reshape the data to fit the model (28x28 pixels, 1 channel)\nX = X.values.reshape(-1, 28, 28, 1)\ntest = test.values.reshape(-1, 28, 28, 1)\n\n# to standardize/normalize the data, we want to limit all the values between 0 and 1. \n# The max value for images is 255 so we will divide by 255\nX = X / 255.0\ntest = test / 255.0\n\nprint('Current Data Shape:')\nprint('Training Data: ', X.shape)\nprint('Testing Data: ', test.shape)","metadata":{"execution":{"iopub.status.busy":"2024-06-05T17:16:35.357338Z","iopub.execute_input":"2024-06-05T17:16:35.357637Z","iopub.status.idle":"2024-06-05T17:16:35.628498Z","shell.execute_reply.started":"2024-06-05T17:16:35.357610Z","shell.execute_reply":"2024-06-05T17:16:35.627522Z"},"trusted":true},"execution_count":5,"outputs":[{"name":"stdout","text":"Current Data Shape:\nTraining Data:  (42000, 28, 28, 1)\nTesting Data:  (28000, 28, 28, 1)\n","output_type":"stream"}]},{"cell_type":"markdown","source":"**Trick #1:**\nTrain_test_split divides the training data into two sections, one for training and one for validating the model. We dont want to validate the model on the very images it was trained on because it wouldn't be a good measure of how well the model can categorize new data. Eventually, after we determine the correct parameters for our model, we can train it on the entire dataset.\n\nThe parameter **train_size** determines what percentage of the dataset goes into the training side, with the remainder going into the testing side.\n\nThe parameter **stratify=y** tells the split to evenly distribute the categories of y into the training and validation. In other words, we can ensure that the frequency of each digit is equal in the training and the validation.\n","metadata":{}},{"cell_type":"code","source":"x_train, x_valid, y_train, y_valid = \\\n    train_test_split(X, y, stratify=y, train_size=0.75)\n\n# making the labels into categories (10 categories, one for each digit 0-9)\ny_train = to_categorical(y_train, num_classes=10)\ny_valid = to_categorical(y_valid, num_classes=10)","metadata":{"execution":{"iopub.status.busy":"2024-06-05T17:16:35.629494Z","iopub.execute_input":"2024-06-05T17:16:35.629779Z","iopub.status.idle":"2024-06-05T17:16:36.048158Z","shell.execute_reply.started":"2024-06-05T17:16:35.629754Z","shell.execute_reply":"2024-06-05T17:16:36.047076Z"},"trusted":true},"execution_count":6,"outputs":[]},{"cell_type":"code","source":"# display some sample images\nfor i in range(4):\n    plt.subplot(240 + 1 + i)\n    plt.imshow(x_train[i], cmap=plt.get_cmap('gray'))\n    \nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-06-05T17:16:36.050602Z","iopub.execute_input":"2024-06-05T17:16:36.050924Z","iopub.status.idle":"2024-06-05T17:16:36.555566Z","shell.execute_reply.started":"2024-06-05T17:16:36.050897Z","shell.execute_reply":"2024-06-05T17:16:36.554568Z"},"trusted":true},"execution_count":7,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 800x550 with 4 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"# Model Specification\n\nUsing Keras, we will set up our deep neural network, which has 3 main components.\n1. **(Trick #2)** The Preprocessing: These are the random rotation, contrast, and gaussian noise errors, that essentially manipulate our image before our model sees it. By adding random rotations, contrasts, and noise into the dataset, we are augmenting our data so that our model sees a wider majority. In other words, we are creating more trainable data out of our existing trainable data. This might not have a big effect on a dataset such as this one, but in other datasets it can have a huge effect.\n2. Convolutional Layers: The Conv2D and MaxPool2D layers begin the image processing that is park of our model. Conv2D is a layer in convolutional neural networks (CNNs) that applies a set of filters to the input image, performing convolution operations to extract features like edges, textures, and patterns. MaxPool2D is a downsampling layer that reduces the spatial dimensions of the input (height and width) by taking the maximum value in each window.\n3. Dense Head: The dense head layer is the portion of the network that now takes in numerical data to be analyzed through layers of neurons. Before this portion, we must flatten the 2D data into 1D. **(Trick #3)** Between Dense layers, we can add dropout layers, that will randomly disconnect a percentage (rate) of the neurons from one layer to the next. This prevents the model from overspecifying certain false features.","metadata":{}},{"cell_type":"code","source":"from tensorflow import keras\nfrom tensorflow.keras import layers\n\nshape = [28, 28, 1]\n\nmodel = keras.Sequential([\n    layers.InputLayer(shape=shape),\n    layers.RandomRotation(factor=0.3),\n    layers.RandomContrast(factor=0.2),\n    layers.GaussianNoise(stddev=0.1),\n    \n    layers.Conv2D(filters=32, kernel_size=5, activation=\"relu\", padding='same'),\n    layers.MaxPool2D(),\n\n    layers.Conv2D(filters=64, kernel_size=3, activation=\"relu\", padding='same'),\n    layers.MaxPool2D(),\n\n    layers.Conv2D(filters=128, kernel_size=3, activation=\"relu\", padding='same'),\n    layers.MaxPool2D(),\n\n    layers.Flatten(),\n    layers.Dense(units=256, activation=\"relu\"),\n    layers.Dense(units=256, activation=\"sigmoid\"),\n    layers.Dropout(rate=0.2),\n    layers.Dense(units=10, activation=\"softmax\"),\n])","metadata":{"execution":{"iopub.status.busy":"2024-06-05T17:16:36.556628Z","iopub.execute_input":"2024-06-05T17:16:36.556883Z","iopub.status.idle":"2024-06-05T17:16:36.834203Z","shell.execute_reply.started":"2024-06-05T17:16:36.556862Z","shell.execute_reply":"2024-06-05T17:16:36.833431Z"},"trusted":true},"execution_count":8,"outputs":[]},{"cell_type":"markdown","source":"# Compilation, Early Stopping, and Fitting\n\nWhen telling the model how to compile, we can specify certain optimizers, the loss function, and the metric we want to track. **(Trick #4)** For most models, the adam optimizer and sgd (stochastic gradient descent) optimizers perform best, and it is a good idea to try both. Furthermore, the loss function of crossentropy works well in most cases, but can sometimes be specified even further depending on the data. **(Trick #5)** In a case where the targets are categorical, like this one, we can specify categorical_crossentropy. In a case where the targets are binary (1 or 0), we can specify binary_crossentropy.\n\nUnderfitting and Overfitting are common problems in an ML model. Very simply, underfitting is when the model is not adequately capturing detailed features. Overfitting is when the model is become too reliant on detailed features. A good **trick #6** to use to aid with this issue is an **early_stopping function**. We can specify a minimum improvement needed (min_delta) within a window of epochs (patience). If it has not improved that amount after that many epochs, the model will stop the training for us and restore the weights of the best epoch.","metadata":{}},{"cell_type":"code","source":"model.compile(\n    optimizer='adam',\n    loss='categorical_crossentropy',\n    metrics=['accuracy']\n)\n\nearly_stopping = keras.callbacks.EarlyStopping(\n    patience=10,\n    min_delta=0.001,\n    restore_best_weights=True,\n)\n\nhistory = model.fit(\n    x_train, y_train,\n    batch_size = 32,\n    epochs = 50,\n    validation_data = (x_valid, y_valid),\n    callbacks=[early_stopping]\n)","metadata":{"execution":{"iopub.status.busy":"2024-06-05T17:16:36.835389Z","iopub.execute_input":"2024-06-05T17:16:36.835737Z","iopub.status.idle":"2024-06-05T17:19:48.747959Z","shell.execute_reply.started":"2024-06-05T17:16:36.835708Z","shell.execute_reply":"2024-06-05T17:19:48.747119Z"},"trusted":true},"execution_count":9,"outputs":[{"name":"stdout","text":"Epoch 1/50\n\u001b[1m985/985\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 7ms/step - accuracy: 0.5777 - loss: 1.1903 - val_accuracy: 0.9506 - val_loss: 0.1734\nEpoch 2/50\n\u001b[1m985/985\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 6ms/step - accuracy: 0.9307 - loss: 0.2246 - val_accuracy: 0.9542 - val_loss: 0.1445\nEpoch 3/50\n\u001b[1m985/985\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 6ms/step - accuracy: 0.9503 - loss: 0.1589 - val_accuracy: 0.9658 - val_loss: 0.1089\nEpoch 4/50\n\u001b[1m985/985\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 6ms/step - accuracy: 0.9595 - loss: 0.1369 - val_accuracy: 0.9709 - val_loss: 0.0930\nEpoch 5/50\n\u001b[1m985/985\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 6ms/step - accuracy: 0.9591 - loss: 0.1287 - val_accuracy: 0.9740 - val_loss: 0.0932\nEpoch 6/50\n\u001b[1m985/985\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 6ms/step - accuracy: 0.9651 - loss: 0.1179 - val_accuracy: 0.9784 - val_loss: 0.0725\nEpoch 7/50\n\u001b[1m985/985\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 6ms/step - accuracy: 0.9685 - loss: 0.1030 - val_accuracy: 0.9772 - val_loss: 0.0807\nEpoch 8/50\n\u001b[1m985/985\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 6ms/step - accuracy: 0.9714 - loss: 0.0952 - val_accuracy: 0.9760 - val_loss: 0.0777\nEpoch 9/50\n\u001b[1m985/985\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 6ms/step - accuracy: 0.9732 - loss: 0.0853 - val_accuracy: 0.9797 - val_loss: 0.0692\nEpoch 10/50\n\u001b[1m985/985\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 6ms/step - accuracy: 0.9731 - loss: 0.0867 - val_accuracy: 0.9790 - val_loss: 0.0703\nEpoch 11/50\n\u001b[1m985/985\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 6ms/step - accuracy: 0.9778 - loss: 0.0761 - val_accuracy: 0.9801 - val_loss: 0.0657\nEpoch 12/50\n\u001b[1m985/985\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 6ms/step - accuracy: 0.9769 - loss: 0.0769 - val_accuracy: 0.9762 - val_loss: 0.0794\nEpoch 13/50\n\u001b[1m985/985\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 6ms/step - accuracy: 0.9783 - loss: 0.0712 - val_accuracy: 0.9813 - val_loss: 0.0675\nEpoch 14/50\n\u001b[1m985/985\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 6ms/step - accuracy: 0.9776 - loss: 0.0758 - val_accuracy: 0.9846 - val_loss: 0.0594\nEpoch 15/50\n\u001b[1m985/985\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 6ms/step - accuracy: 0.9800 - loss: 0.0671 - val_accuracy: 0.9810 - val_loss: 0.0678\nEpoch 16/50\n\u001b[1m985/985\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 6ms/step - accuracy: 0.9790 - loss: 0.0648 - val_accuracy: 0.9805 - val_loss: 0.0732\nEpoch 17/50\n\u001b[1m985/985\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 6ms/step - accuracy: 0.9790 - loss: 0.0654 - val_accuracy: 0.9819 - val_loss: 0.0645\nEpoch 18/50\n\u001b[1m985/985\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 6ms/step - accuracy: 0.9815 - loss: 0.0617 - val_accuracy: 0.9850 - val_loss: 0.0533\nEpoch 19/50\n\u001b[1m985/985\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 6ms/step - accuracy: 0.9806 - loss: 0.0628 - val_accuracy: 0.9837 - val_loss: 0.0570\nEpoch 20/50\n\u001b[1m985/985\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 6ms/step - accuracy: 0.9815 - loss: 0.0593 - val_accuracy: 0.9878 - val_loss: 0.0459\nEpoch 21/50\n\u001b[1m985/985\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 6ms/step - accuracy: 0.9816 - loss: 0.0615 - val_accuracy: 0.9858 - val_loss: 0.0560\nEpoch 22/50\n\u001b[1m985/985\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 6ms/step - accuracy: 0.9815 - loss: 0.0603 - val_accuracy: 0.9863 - val_loss: 0.0512\nEpoch 23/50\n\u001b[1m985/985\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 6ms/step - accuracy: 0.9838 - loss: 0.0540 - val_accuracy: 0.9859 - val_loss: 0.0481\nEpoch 24/50\n\u001b[1m985/985\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 6ms/step - accuracy: 0.9825 - loss: 0.0572 - val_accuracy: 0.9855 - val_loss: 0.0546\nEpoch 25/50\n\u001b[1m985/985\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 6ms/step - accuracy: 0.9821 - loss: 0.0582 - val_accuracy: 0.9858 - val_loss: 0.0517\nEpoch 26/50\n\u001b[1m985/985\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 6ms/step - accuracy: 0.9836 - loss: 0.0548 - val_accuracy: 0.9875 - val_loss: 0.0451\nEpoch 27/50\n\u001b[1m985/985\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 6ms/step - accuracy: 0.9831 - loss: 0.0525 - val_accuracy: 0.9851 - val_loss: 0.0568\nEpoch 28/50\n\u001b[1m985/985\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 6ms/step - accuracy: 0.9831 - loss: 0.0577 - val_accuracy: 0.9842 - val_loss: 0.0596\nEpoch 29/50\n\u001b[1m985/985\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 6ms/step - accuracy: 0.9818 - loss: 0.0579 - val_accuracy: 0.9861 - val_loss: 0.0505\nEpoch 30/50\n\u001b[1m985/985\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 6ms/step - accuracy: 0.9838 - loss: 0.0510 - val_accuracy: 0.9863 - val_loss: 0.0507\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Graphing","metadata":{}},{"cell_type":"code","source":"history_df = pd.DataFrame(history.history)\nhistory_df.loc[:, ['loss', 'val_loss']].plot(title=\"Cross-entropy\")\nhistory_df.loc[:, ['accuracy', 'val_accuracy']].plot(title=\"Accuracy\")\n\nprint((\"Best Validation Loss: {:0.4f}\" +\\\n      \"\\nBest Validation Accuracy: {:0.4f}\")\\\n      .format(history_df['val_loss'].min(), \n              history_df['val_accuracy'].max()))","metadata":{"execution":{"iopub.status.busy":"2024-06-05T17:19:48.749279Z","iopub.execute_input":"2024-06-05T17:19:48.749573Z","iopub.status.idle":"2024-06-05T17:19:49.422892Z","shell.execute_reply.started":"2024-06-05T17:19:48.749548Z","shell.execute_reply":"2024-06-05T17:19:49.421964Z"},"trusted":true},"execution_count":10,"outputs":[{"name":"stdout","text":"Best Validation Loss: 0.0451\nBest Validation Accuracy: 0.9878\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 800x550 with 1 Axes>","image/png":""},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 800x550 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"As we can see, the accuracy from our seen images and the accuracy from the unseen validation images remains extremely close, even higher on the validation images it hasn't seen. This is a good sign that our model is not overfitting nor underfitting.","metadata":{}},{"cell_type":"markdown","source":"# Evaluation and Prediction","metadata":{}},{"cell_type":"markdown","source":"Evaluating our model on the entire training dataset. We should expect a very high accuracy here as this is the very data that the model was trained upon. A sort of, assurance metric that our model worked.","metadata":{}},{"cell_type":"code","source":"y = to_categorical(y, num_classes=10)\nscore = model.evaluate(X, y, verbose=0)\nprint('loss=',score[0])\nprint('accuracy=', score[1])","metadata":{"execution":{"iopub.status.busy":"2024-06-05T17:19:49.424398Z","iopub.execute_input":"2024-06-05T17:19:49.424778Z","iopub.status.idle":"2024-06-05T17:19:52.790889Z","shell.execute_reply.started":"2024-06-05T17:19:49.424744Z","shell.execute_reply":"2024-06-05T17:19:52.790001Z"},"trusted":true},"execution_count":11,"outputs":[{"name":"stdout","text":"loss= 0.03616896644234657\naccuracy= 0.9892619252204895\n","output_type":"stream"}]},{"cell_type":"markdown","source":"Below is code for predicting the test dataset and formatting it into the specified format for the Digit Recognizer Competition. The output prediction is 10 columns, all of which after rounding should have a value of 0 for each row (image) except one. The unique column with a 1 in it is the guess of our model. *Argmax* takes this value and adds it to the list of predictions.","metadata":{}},{"cell_type":"code","source":"model_preds = np.round(model.predict(test))\nfinal_preds =[]\nfor i in model_preds:\n    final_preds.append(np.argmax(i))\n    \n# list of numbers sequentially from 1 to the number of total images. \nids = list(range(1, len(final_preds)+1))","metadata":{"execution":{"iopub.status.busy":"2024-06-05T17:19:52.792160Z","iopub.execute_input":"2024-06-05T17:19:52.792491Z","iopub.status.idle":"2024-06-05T17:19:55.001493Z","shell.execute_reply.started":"2024-06-05T17:19:52.792465Z","shell.execute_reply":"2024-06-05T17:19:55.000314Z"},"trusted":true},"execution_count":12,"outputs":[{"name":"stdout","text":"\u001b[1m875/875\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 1ms/step\n","output_type":"stream"}]},{"cell_type":"code","source":"output = pd.DataFrame({\n    'ImageId': ids,\n    'Label': final_preds\n})\n\n#uncomment the below lines to write the output into your submission file.\noutput.to_csv('submission.csv', index=False)\noutput = pd.read_csv('submission.csv')\n#preview into our submission file\noutput.head()","metadata":{"execution":{"iopub.status.busy":"2024-06-05T17:19:55.004631Z","iopub.execute_input":"2024-06-05T17:19:55.004986Z","iopub.status.idle":"2024-06-05T17:19:55.165818Z","shell.execute_reply.started":"2024-06-05T17:19:55.004933Z","shell.execute_reply":"2024-06-05T17:19:55.164867Z"},"trusted":true},"execution_count":13,"outputs":[{"execution_count":13,"output_type":"execute_result","data":{"text/plain":"   ImageId  Label\n0        1      2\n1        2      0\n2        3      9\n3        4      9\n4        5      3","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ImageId</th>\n      <th>Label</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>9</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>9</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>3</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]}]}